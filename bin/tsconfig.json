// tsconfig.json

{
    
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "ESM",

  "compilerOptions": {

        /* Visit https://aka.ms/tsconfig.json to read more about this file */

        /* Language and Environment */
        "target": "es2015",                                     /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
        "lib": ["esnext", "es2017", "ES2015", "dom"],           /* Specify a set of bundled library declaration files that describe the target runtime environment. */
        "experimentalDecorators": true,                         /* Enable experimental support for TC39 stage 2 draft decorators. */
        "emitDecoratorMetadata": true,                          /* Emit design-type metadata for decorated declarations in source files. */

        /* Modules */
        "module": "esnext",                                      /* Specify what module code is generated. */
        "rootDir": "./ts",                                       /* Specify the root folder within your source files. */
        "moduleResolution": "node",                             /* Specify how TypeScript looks up a file from a given module specifier. */
        //"baseUrl": "src"                                      /* Specify the base directory to resolve non-relative module names. */,
        // "paths": {
        //   "@/*": ["./*"],
        //   "#/*": ["./*"]
        // },
        // "rootDirs": [],                                      /* Allow multiple folders to be treated as one when resolving modules. */
        // "typeRoots": [                                          /* Specify multiple folders that act like `./node_modules/@types`. */
        //     "node_modules/@types"
        // ],
        "types": ["node"],                                         /* Specify type package names to be included without being referenced in a source file. */
        // "allowUmdGlobalAccess": true,                        /* Allow accessing UMD globals from modules. */
        "resolveJsonModule": true,                           /* Enable importing .json files */
        // "noResolve": true,                                   /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

        /* JavaScript Support */
        "allowJs": true                                         /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */,
        "checkJs": false                                        /* Enable error reporting in type-checked JavaScript files. */,
        // "maxNodeModuleJsDepth": 1,                           /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */


        /* Emit */
    //   "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    //   "declarationMap": true,                              /* Create sourcemaps for d.ts files. */
        // "emitDeclarationOnly": true,                         /* Only output d.ts files and not JavaScript files. */
        "sourceMap": true,                                      /* Create source map files for emitted JavaScript files. */
        // "outFile": "./",                                     /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
        "outDir": "./js",                                       /* Specify an output folder for all emitted files. */
        "removeComments": true,                                 /* Disable emitting comments. */
        "noImplicitReturns": true,
        "importHelpers": true,                                  /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
        "downlevelIteration": false,                            /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
        "noEmitOnError": false,                                 /* Disable emitting files if any type checking errors are reported. */


        /* Interop Constraints */
        "allowSyntheticDefaultImports": true,                   /* Allow 'import x from y' when a module doesn't have a default export. */
        "esModuleInterop": true,                                /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */

        /* Type Checking */
        "strict": true                                          /* Enable all strict type-checking options. */,
        "noImplicitAny": true,                                  /* Enable error reporting for expressions and declarations with an implied `any` type.. */
        "strictNullChecks": true,                               /* When type checking, take into account `null` and `undefined`. */
        "strictFunctionTypes": true,                            /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
        "strictBindCallApply": true,                            /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
        "noFallthroughCasesInSwitch": true,                     /* Enable error reporting for fallthrough cases in switch statements. */

        /* Completeness */
        "skipLibCheck": true                                    /* Skip type checking all .d.ts files. */

    },

    "ts-node": {
        "esm": true,
        "experimentalSpecifierResolution": "node"
    },

    "include": [
        // "src/**/*",
        // "src/**/*.ts",
        // "script/**/*",
        // "src/index.ts.xxx",
        // "src/index.ts.xxx",
        // "script/release.ts",
        "./ts/**/*.ts",
        // "tmp/SvgOptimizer.ts",

    ],

    "exclude": [
        "**/*.spec.ts",
        "node_modules",
        "dist",
        "public",
        "build",
        "tmp"
    ]

}
