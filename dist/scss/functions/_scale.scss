// ============================================================================
// Poster
// ============================================================================

////
/// 
/// Scale Functions Module
/// ===========================================================================
/// 
/// This module defines various scales used for designing harmonious layouts
/// and typographies, including musical scales and a classic typographic scale.
/// It also provides a function to calculate values based on a modular scale,
/// which is essential for maintaining consistent design proportions.
/// 
/// @group Scale
/// @author Scape Agency
/// @link https://unit.gl
/// @since 0.1.0 initial release
/// @todo None
/// @access public
/// 
////


// ============================================================================
// Use
// ============================================================================


// ============================================================================
// Functions
// ============================================================================


///
/// Modular Scale Function
/// ---------------------------------------------------------------------------
/// 
/// Calculates sizes (like font-size, spacing) based on a modular
/// scale. This helps maintain harmonious proportions across a design.
/// 
/// @name modular_scale
/// @param {Number} $increment - The step on the scale, can be positive or negative.
/// @param {Number} $base - The base value to scale from, defaults to 1em (typographic base size).
/// @param {Number} $ratio - The ratio to use for scaling, defaults to the Golden Ratio (1.618).
/// @return {Number} - The calculated value based on the modular scale.
/// 
@function modular_scale($increment: 1, $base: 1em, $ratio: 1.618) {
    // Validate inputs
    @if type-of($increment) != 'number' {
        @error "Step must be a number.";
    }
  
    @if type-of($base) != 'number' and not unitless($base) {
        @error "Base must be a number with or without units.";
    }
  
    @if type-of($ratio) != 'number' or $ratio <= 0 {
        @error "Ratio must be a positive number.";
    }
  
    // Calculate the modular scale value
    @return $base * pow($ratio, $increment);
}
