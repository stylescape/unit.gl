/// @mixin fluid-spacing
/// Generates fluid spacing (margins/paddings) based on viewport width.
/// @param {Number|Unit} $min - Minimum spacing at the smallest viewport width.
/// @param {Number|Unit} $max - Maximum spacing at the largest viewport width.
/// @param {Number|Unit} $min-vw - Minimum viewport width.
/// @param {Number|Unit} $max-vw - Maximum viewport width.
/// @param {String} $property - The CSS property to apply (margin, padding, etc.).
/// @example scss - Usage
///   @include fluid-spacing(8px, 32px, 320px, 1280px, 'padding');
@mixin fluid-spacing($min, $max, $min-vw, $max-vw, $property) {
    $fluid-value: linear_interpolation($min, $max, $min-vw, $max-vw);
    #{$property}: #{$min};

    @media (min-width: $min-vw) {
        #{$property}: $fluid-value;
    }

    @media (min-width: $max-vw) {
        #{$property}: $max;
    }
}

/// @mixin container
/// Creates a centered container with a specified maximum width and optional padding.
/// @param {Number|Unit} $max-width - The maximum width of the container.
/// @param {Number|Unit} $padding - The padding inside the container (default: 16px).
/// @example scss - Usage
///   @include container(1200px, 24px);
@mixin container($max-width, $padding: 16px) {
    max-width: $max-width;
    padding-left: $padding;
    padding-right: $padding;
    margin-left: auto;
    margin-right: auto;
}

/// @mixin responsive-grid
/// Generates a responsive grid layout with a customizable number of columns and gaps.
/// @param {Number} $columns - Number of columns in the grid.
/// @param {Number|Unit} $gap - Gap between grid items (default: 16px).
/// @param {Number|Unit} $breakpoint - Breakpoint at which the grid becomes a single column (default: 768px).
/// @example scss - Usage
///   @include responsive-grid(3, 24px, 768px);
@mixin responsive-grid($columns, $gap: 16px, $breakpoint: 768px) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    gap: $gap;

    @media (max-width: $breakpoint) {
        grid-template-columns: 1fr;
    }
}

/// @mixin aspect-ratio
/// Enforces an aspect ratio for an element using the padding-top trick.
/// @param {Number} $width - The width component of the aspect ratio.
/// @param {Number} $height - The height component of the aspect ratio.
/// @example scss - Usage
///   @include aspect-ratio(16, 9);
@mixin aspect-ratio($width, $height) {
    position: relative;
    &::before {
        content: '';
        display: block;
        padding-top: calc(#{$height} / #{$width} * 100%);
    }

    > * {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
    }
}

/// @mixin aspect-ratio
/// Sets a fixed aspect ratio for an element.
/// @param {Number} $width - The width of the element.
/// @param {Number} $height - The height of the element.
/// @example scss - Usage
///   @include aspect-ratio(16, 9);
@mixin aspect-ratio($width, $height) {
    position: relative;
    width: 100%;
    padding-bottom: calc(100% * #{$height} / #{$width});
    
    > * {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

/// @mixin responsive-font-size
/// Creates a font size that scales fluidly between two viewport widths.
/// @param {Number|Unit} $min-size - Minimum font size.
/// @param {Number|Unit} $max-size - Maximum font size.
/// @param {Number|Unit} $min-vw - Minimum viewport width.
/// @param {Number|Unit} $max-vw - Maximum viewport width.
/// @example scss - Usage
///   @include responsive-font-size(16px, 24px, 320px, 1280px);
@mixin responsive-font-size($min-size, $max-size, $min-vw, $max-vw) {
    font-size: $min-size;

    @media (min-width: $min-vw) {
        font-size: linear_interpolation($min-size, $max-size, $min-vw, $max-vw);
    }

    @media (min-width: $max-vw) {
        font-size: $max-size;
    }
}

/// @mixin linear-gradient-overlay
/// Applies a linear gradient overlay on top of an element's background.
/// @param {Color} $start-color - The starting color of the gradient.
/// @param {Color} $end-color - The ending color of the gradient.
/// @param {String} $direction - The direction of the gradient (default: to bottom).
/// @example scss - Usage
///   @include linear-gradient-overlay(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.8), 'to bottom');
@mixin linear-gradient-overlay($start-color, $end-color, $direction: 'to bottom') {
    position: relative;
    z-index: 0;

    &::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(#{$direction}, #{$start-color}, #{$end-color});
        z-index: -1;
    }
}

/// @mixin truncate-text
/// Truncates text with an ellipsis if it overflows the container.
/// @example scss - Usage
///   @include truncate-text;
@mixin truncate-text() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/// @mixin clear-fix
/// Applies a clearfix to an element, ensuring it correctly contains floated children.
/// @example scss - Usage
///   @include clear-fix;
@mixin clear-fix() {
    &::after {
        content: '';
        display: table;
        clear: both;
    }
}

/// @mixin responsive-container
/// Creates a responsive container that adjusts its padding and max-width based on viewport size.
/// @param {Number|Unit} $max-width - The maximum width of the container.
/// @param {Number|Unit} $padding - The padding inside the container.
/// @example scss - Usage
///   @include responsive-container(1200px, 16px);
@mixin responsive-container($max-width, $padding) {
    max-width: $max-width;
    padding-left: $padding;
    padding-right: $padding;
    margin-left: auto;
    margin-right: auto;

    @media (max-width: $max-width) {
        padding-left: calc(#{$padding} / 2);
        padding-right: calc(#{$padding} / 2);
    }
}


/// @mixin grid-container
/// Sets up a basic grid container with customizable columns and gap.
/// @param {Number} $columns - The number ofcolumns.
/// @param {Number|Unit} $gap - The gap size between columns.
/// @example scss - Usage
///   @include grid-container(3, 24px);
@mixin grid-container($columns: 12, $gap: 16px) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    gap: $gap;
}

/// @mixin responsive-background
/// Creates a responsive background that adjusts its size and position based on the viewport.
/// @param {String} $image - The background image URL.
/// @param {String} $size - The size of the background image (default: cover).
/// @param {String} $position - The position of the background image (default: center).
/// @example scss - Usage
///   @include responsive-background('path/to/image.jpg', 'cover', 'center');
@mixin responsive-background($image, $size: cover, $position: center) {
    background-image: url(#{$image});
    background-size: $size;
    background-position: $position;
    background-repeat: no-repeat;

    @media (max-width: 768px) {
        background-size: contain;
        background-position: top;
    }
}

/// @mixin grid-system
/// Generates a grid system with customizable columns and gutter width.
/// @param {Number} $columns - Number of columns in the grid (default: 12).
/// @param {Number|Unit} $gutter - The gutter width between columns (default: 16px).
/// @example scss - Usage
///   @include grid-system(12, 20px);
@mixin grid-system($columns: 12, $gutter: 16px) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    grid-gap: $gutter;

    > * {
        grid-column: span 1;
    }
}


/// @mixin overlay
/// Adds a semi-transparent overlay on top of an element.
/// @param {Color} $color - The color of the overlay.
/// @param {Number} $opacity - The opacity of the overlay (default: 0.5).
/// @example scss - Usage
///   @include overlay(rgba(0, 0, 0, 0.5));
@mixin overlay($color, $opacity: 0.5) {
    position: relative;

    &::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: $color;
        opacity: $opacity;
        z-index: 1;
    }

    > * {
        position: relative;
        z-index: 2;
    }
}


/// @mixin text-shadow
/// Adds a text shadow with customizable offset, blur, and color.
/// @param {Number|Unit} $x - Horizontal offset of the shadow.
/// @param {Number|Unit} $y - Vertical offset of the shadow.
/// @param {Number|Unit} $blur - Blur radius of the shadow (default: 2px).
/// @param {Color} $color - Color of the shadow (default: rgba(0, 0, 0, 0.5)).
@mixin text-shadow($x, $y, $blur: 2px, $color: rgba(0, 0, 0, 0.5)) {
    text-shadow: #{$x} #{$y} #{$blur} #{$color};
}


/// @mixin fluid-border-radius
/// Creates a fluid border-radius that scales with the viewport width.
/// @param {Number|Unit} $min-radius - Minimum border-radius.
/// @param {Number|Unit} $max-radius - Maximum border-radius.
/// @param {Number|Unit} $min-vw - Minimum viewport width.
/// @param {Number|Unit} $max-vw - Maximum viewport width.
/// @example scss - Usage
///   @include fluid-border-radius(5px, 20px, 320px, 1280px);
@mixin fluid-border-radius($min-radius, $max-radius, $min-vw, $max-vw) {
    border-radius: $min-radius;

    @media (min-width: $min-vw) {
        border-radius: linear_interpolation($min-radius, $max-radius, $min-vw, $max-vw);
    }

    @media (min-width: $max-vw) {
        border-radius: $max-radius;
    }
}


/// @mixin responsive-max-width
/// Sets a responsive max-width that adjusts between two viewport sizes.
/// @param {Number|Unit} $min-width - Minimum max-width.
/// @param {Number|Unit} $max-width - Maximum max-width.
/// @param {Number|Unit} $min-vw - Minimum viewport width.
/// @param {Number|Unit} $max-vw - Maximum viewport width.
/// @example scss - Usage
///   @include responsive-max-width(300px, 1200px, 320px, 1440px);
@mixin responsive-max-width($min-width, $max-width, $min-vw, $max-vw) {
    max-width: $min-width;

    @media (min-width: $min-vw) {
        max-width: linear_interpolation($min-width, $max-width, $min-vw, $max-vw);
    }

    @media (min-width: $max-vw) {
        max-width: $max-width;
    }
}



/// @mixin flex-center
/// Centers content both horizontally and vertically using Flexbox.
/// @example scss - Usage
///   @include flex-center;
@mixin flex-center() {
    display: flex;
    justify-content: center;
    align-items: center;
}


/// @mixin responsive-padding
/// Creates responsive padding that adjusts between two viewport sizes.
/// @param {Number|Unit} $min-padding - Minimum padding.
/// @param {Number|Unit} $max-padding - Maximum padding.
/// @param {Number|Unit} $min-vw - Minimum viewport width.
/// @param {Number|Unit} $max-vw - Maximum viewport width.
/// @example scss - Usage
///   @include responsive-padding(10px, 50px, 320px, 1280px);
@mixin responsive-padding($min-padding, $max-padding, $min-vw, $max-vw) {
    padding: $min-padding;

    @media (min-width: $min-vw) {
        padding: linear_interpolation($min-padding, $max-padding, $min-vw, $max-vw);
    }

    @media (min-width: $max-vw) {
        padding: $max-padding;
    }
}



/// @mixin debug-outline
/// Applies a temporary outline to an element for debugging purposes.
/// @param {Color} $color - The color of the outline (default: red).
/// @param {Number|Unit} $thickness - The thickness of the outline (default: 1px).
/// @example scss - Usage
///   @include debug-outline(red, 2px);
@mixin debug-outline($color: red, $thickness: 1px) {
    outline: #{$thickness} solid #{$color};
}



/// @mixin equal-height-columns
/// Ensures columns have equal height using Flexbox.
/// @example scss - Usage
///   @include equal-height-columns;
@mixin equal-height-columns() {
    display: flex;
    flex-wrap: wrap;

    > * {
        flex: 1;
        display: flex;
        flex-direction: column;
    }
}


/// @mixin center-container
/// Centers a container both horizontally and vertically.
/// @param {Boolean} $absolute - Whether to use absolute positioning (default: true).
/// @example scss - Usage
///   @include center-container(true);
@mixin center-container($absolute: true) {
    @if $absolute {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    } @else {
        display: flex;
        justify-content: center;
        align-items: center;
    }
}


/// @mixin text-rotation
/// Rotates text by a specified angle.
/// @param {Number} $angle - The angle of rotation (default: 45deg).
/// @example scss - Usage
///   @include text-rotation(90deg);
@mixin text-rotation($angle: 45deg) {
    transform: rotate($angle);
    display: inline-block;
}


/// @function z-index-layer
/// Retrieves a z-index value from a predefined map of layers.
/// @param {String} $layer - The key name of the z-index layer.
/// @return{Number} - The z-index value for the specified layer.
/// @example scss - Usage
///   $z-index: z-index-layer(‘modal’);
/// 
///
@function z-index-layer($layer) {

    $layers: (
        "background": 1,
        "base": 10,
        "modal": 100,
        "overlay": 200,
        "tooltip": 300,
        "dropdown": 400
        );
    @if map-has-key($layers, $layer) {
        @return map-get($layers, $layer);
    } @else {
        @warn "Layer `#{$layer}` not found in z-index layers map.";
        @return null;
    }
}




/// @mixin visually-hidden
/// Hides elements visually but keeps them accessible for screen readers.
/// @example scss - Usage
///   @include visually-hidden;
@mixin visually-hidden() {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
}



/// @mixin flex-center
/// Centers content horizontally and vertically using Flexbox.
/// @example scss - Usage
///   @include flex-center;
@mixin flex-center() {
    display: flex;
    justify-content: center;
    align-items: center;
}


/// @mixin box-shadow
/// Applies a box shadow to an element.
/// @param {Number|Unit} $x - The horizontal offset of the shadow.
/// @param {Number|Unit} $y - The vertical offset of the shadow.
/// @param {Number|Unit} $blur - The blur radius of the shadow.
/// @param {Number|Unit} $spread - The spread radius of the shadow (default: 0).
/// @param {Color} $color - The color of the shadow.
/// @param {Boolean} $inset - Whether the shadow is inset (default: false).
/// @example scss - Usage
///   @include box-shadow(2px, 4px, 6px, 0, rgba(0, 0, 0, 0.2));
@mixin box-shadow($x, $y, $blur, $spread: 0, $color, $inset: false) {
    box-shadow: #{$inset ? 'inset' : ''} $x $y $blur $spread $color;
}


/// @mixin gradient-background
/// Creates a linear gradient background.
/// @param {Color} $start-color - The starting color of the gradient.
/// @param {Color} $end-color - The ending color of the gradient.
/// @param {String} $direction - The direction of the gradient (default: to bottom).
/// @example scss - Usage
///   @include gradient-background(#ff7e5f, #feb47b, to right);
@mixin gradient-background($start-color, $end-color, $direction: to bottom) {
    background: linear-gradient($direction, $start-color, $end-color);
}


/// @mixin responsive-font
/// Scales font size responsively based on viewport width.
/// @param {Number|Unit} $min-size - Minimum font size.
/// @param {Number|Unit} $max-size - Maximum font size.
/// @param {Number|Unit} $min-vw - Minimum viewport width.
/// @param {Number|Unit} $max-vw - Maximum viewport width.
/// @example scss - Usage
///   @include responsive-font(16px, 24px, 320px, 1280px);
@mixin responsive-font($min-size, $max-size, $min-vw, $max-vw) {
    font-size: $min-size;

    @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-size} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-vw}) / (#{$max-vw} - #{$min-vw})));
    }

    @media screen and (min-width: $max-vw) {
        font-size: $max-size;
    }
}


/// @mixin position-absolute-center
/// Positions an element in the center of its containing element.
/// @param {Number|Unit} $width - The width of the element.
/// @param {Number|Unit} $height - The height of the element.
/// @example scss - Usage
///   @include position-absolute-center(100px, 100px);
@mixin position-absolute-center($width, $height) {
    position: absolute;
    top: 50%;
    left: 50%;
    width: $width;
    height: $height;
    transform: translate(-50%, -50%);
}


/// @function dynamic-padding
/// Calculates dynamic padding based on viewport width.
/// @param {Number|Unit} $min-padding - Minimum padding.
/// @param {Number|Unit} $max-padding - Maximum padding.
/// @param {Number|Unit} $min-vw - Minimum viewport width.
/// @param {Number|Unit} $max-vw - Maximum viewport width.
/// @return {String} - The calculated padding value.
/// @example scss - Usage
///   padding: dynamic-padding(10px, 50px, 320px, 1280px);
///
@function dynamic-padding($min-padding, $max-padding, $min-vw, $max-vw) {
    @return calc(#{$min-padding} + (#{$max-padding} - #{$min-padding}) * ((100vw - #{$min-vw}) / (#{$max-vw} - #{$min-vw})));
}



/// @mixin grid-responsive
/// Creates a responsive grid that adjusts the number of columns based on viewport width.
/// @param {Number|Unit} $min-columns - Minimum number of columns.
/// @param {Number|Unit} $max-columns - Maximum number of columns.
/// @param {Number|Unit} $min-vw - Minimum viewport width.
/// @param {Number|Unit} $max-vw - Maximum viewport width.
/// @param {Number|Unit} $gap - Gap between grid items.
/// @example scss - Usage
///   @include grid-responsive(2, 6, 320px, 1280px, 20px);
@mixin grid-responsive($min-columns, $max-columns, $min-vw, $max-vw, $gap) {
    display: grid;
    grid-gap: $gap;

    @media screen and (max-width: $min-vw) {
        grid-template-columns: repeat($min-columns, 1fr);
    }

    @media screen and (min-width: $min-vw) and (max-width: $max-vw) {
        grid-template-columns: repeat(auto-fill, minmax(calc(100% / #{$max-columns}), 1fr));
    }

    @media screen and (min-width: $max-vw) {
        grid-template-columns: repeat($max-columns, 1fr);
    }
}


/// @mixin focus-ring
/// Applies a consistent focus ring style across elements.
/// @param {Color} $color - The color of the focus ring (default: #007bff).
/// @param {Number|Unit} $width - The width of the focus ring (default: 2px).
/// @example scss - Usage
///   @include focus-ring(#ff5722, 3px);
@mixin focus-ring($color: #007bff, $width: 2px) {
    outline: none;
    box-shadow: 0 0 0 $width $color;

    &:focus {
        outline: none;
        box-shadow: 0 0 0 $width $color;
    }
}


/// @function color-tint
/// Generates a tinted version of a color by mixing it with white.
/// @param {Color} $color - The base color to tint.
/// @param {Number} $percentage - The percentage of white to mix in (0-100).
/// @return {Color} - The tinted color.
/// @example scss - Usage
///   $tinted-color: color-tint(#ff5722, 20%);
@function color-tint($color, $percentage) {
    @return mix(#ffffff, $color, $percentage);
}


/// @function color-shade
/// Generates a shaded version of a color by mixing it with black.
/// @param {Color} $color - The base color to shade.
/// @param {Number} $percentage - The percentage of black to mix in (0-100).
/// @return {Color} - The shaded color.
/// @example scss - Usage
///   $shaded-color: color-shade(#ff5722, 20%);
@function color-shade($color, $percentage) {
    @return mix(#000000, $color, $percentage);
}


/// @mixin responsive-text
/// Creates text that scales responsively with the viewport width.
/// @param {Number|Unit} $min-size - The minimum text size.
/// @param {Number|Unit} $max-size - The maximum text size.
/// @param {Number|Unit} $min-vw - The minimum viewport width.
/// @param {Number|Unit} $max-vw - The maximum viewport width.
/// @example scss - Usage
///   @include responsive-text(16px, 24px, 320px, 1280px);
@mixin responsive-text($min-size, $max-size, $min-vw, $max-vw) {
    font-size: $min-size;

    @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-size} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-vw}) / (#{$max-vw} - #{$min-vw})));
    }

    @media screen and (min-width: $max-vw) {
        font-size: $max-size;
    }
}